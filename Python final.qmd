# Python Final Exam {.unnumbered}

## Problem 1.

![](images/Python_final1.png)

## Answer

```{python}
import pandas as pd
import numpy as np

def MVportfolio(asset, mu_p):
    # Calculate log returns (first column is date.)
    return_asset = np.log(asset.iloc[:, 1:]).diff()

    # Calculate expected log returns
    expect_asset = return_asset.mean()
    expect_asset_np = np.array(expect_asset)

    # Calculate covariance matrix
    cov_asset = return_asset.cov()
    cov_asset_np = np.array(cov_asset)

    # Use lagrange multipliers method for optimazation
    num_assets = return_asset.shape[1]
    u = np.ones(num_assets)

    a = np.block([
        [cov_asset_np, u[:, np.newaxis], expect_asset_np[:, np.newaxis]],
        [u[np.newaxis, :], np.zeros(1), np.zeros(1)],
        [expect_asset_np[np.newaxis, :], np.zeros(1), np.zeros(1)]
    ])

    b = np.concatenate([np.zeros(num_assets), [1], [mu_p]])

    lagrange = np.linalg.solve(a, b)
    
    # Optimal weights
    result = lagrange[:num_assets]

    # Portfolio variance
    Var_p = np.dot(result, np.dot(cov_asset, result))

    return result, Var_p

# Test
it = pd.read_csv('it.csv')

MVportfolio(asset = it, mu_p = -0.001)
```

```{python}
import matplotlib.pyplot as plot

# Range of mu_p
mu_p_values = np.arange(-0.001, 0.0011, 0.0001)

# Looping
portfolio_variances = []
for mu_p in mu_p_values:
    tmp = MVportfolio(asset=it, mu_p=mu_p)
    Var_p = tmp[1]
    portfolio_variances.append(Var_p)

# Plotting
plot.figure()
plot.plot(portfolio_variances, mu_p_values)
plot.ylabel('Portfolio Variance')
plot.xlabel('Portfolio expected return')
```

## Problem 2.

![](images/Python_final2.png)

## Answer

```{python}
# 1. 'price.csv' 파일을 불러온 뒤, 'date' 열이 DatetimeIndex 자료형이 되도록 변경하고, 이를 Index로 하는 pd.DataFrame 객체 price를 생성

price = pd.read_csv('price.csv')
price['date'] = pd.to_datetime(price['date'])
price = price.set_index('date')
price
```

```{python}
# 2. price에서 2019년도에 해당하는 자료만 선택해서 price_sub로 저장
price_sub=price.loc['2020']
price_sub
```

```{python}
rng = pd.date_range( '2011-01-31', periods=18, freq="M")
ts = pd.DataFrame( np.random.randn(len(rng)), index=rng )
ts['2011']
```

## Problem 3.

![](images/Python_final3.png)

## Answer