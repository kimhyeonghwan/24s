{
  "hash": "9d95c2218dd7bceb05e056aa85bbb0bb",
  "result": {
    "engine": "jupyter",
    "markdown": "# Python Final Exam {.unnumbered}\n\n## Problem 1.\n\n![](images/Python_final1.png)\n\n## Answer 1.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndef MVportfolio(asset, mu_p):\n    # Calculate log returns (first column is date.)\n    return_asset = np.log(asset.iloc[:, 1:]).diff()\n\n    # Calculate expected log returns\n    expect_asset = return_asset.mean()\n    expect_asset_np = np.array(expect_asset)\n\n    # Calculate covariance matrix\n    cov_asset = return_asset.cov()\n    cov_asset_np = np.array(cov_asset)\n\n    # Use lagrange multipliers method for optimazation\n    num_assets = return_asset.shape[1]\n    u = np.ones(num_assets)\n\n    a = np.block([\n        [cov_asset_np, u[:, np.newaxis], expect_asset_np[:, np.newaxis]],\n        [u[np.newaxis, :], np.zeros(1), np.zeros(1)],\n        [expect_asset_np[np.newaxis, :], np.zeros(1), np.zeros(1)]\n    ])\n\n    b = np.concatenate([np.zeros(num_assets), [1], [mu_p]])\n\n    lagrange = np.linalg.solve(a, b)\n    \n    # Optimal weights\n    result = lagrange[:num_assets]\n\n    # Portfolio variance\n    Var_p = np.dot(result, np.dot(cov_asset, result))\n\n    return result, Var_p\n\n# Test\nit = pd.read_csv('it.csv')\nMVportfolio(asset = it, mu_p = -0.001)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n(array([ 0.16186582,  0.25684189, -0.35114871,  0.44970549,  0.48273551]),\n 0.00014638968239383282)\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plot\n\n# Range of mu_p\nmu_p_values = np.arange(-0.001, 0.0011, 0.0001)\n\n# Looping\nportfolio_variances = []\nfor mu_p in mu_p_values:\n    tmp = MVportfolio(asset=it, mu_p=mu_p)\n    Var_p = tmp[1]\n    portfolio_variances.append(Var_p)\n\n# Plotting\nplot.plot(portfolio_variances, mu_p_values)\nplot.ylabel('Portfolio Variance')\nplot.xlabel('Portfolio expected return')\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nText(0.5, 0, 'Portfolio expected return')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Python final_files/figure-pdf/cell-3-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Problem 2.\n\n![](images/Python_final2.png)\n\n## Answer 2.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# 1. 'price.csv'의 'date'를 DatetimeIndex로 하는 pd.DataFrame price 생성\nprice = pd.read_csv('price.csv')\nprice['date'] = pd.to_datetime(price['date'])\nprice = price.set_index('date')\nprice\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>X005930</th>\n      <th>X000660</th>\n      <th>X051910</th>\n      <th>X207940</th>\n      <th>X035420</th>\n      <th>X035720</th>\n      <th>X005380</th>\n      <th>X006400</th>\n      <th>X068270</th>\n      <th>X000270</th>\n      <th>...</th>\n      <th>X058220</th>\n      <th>X038160</th>\n      <th>X033600</th>\n      <th>X195440</th>\n      <th>X058420</th>\n      <th>X121890</th>\n      <th>X114570</th>\n      <th>X347140</th>\n      <th>X080440</th>\n      <th>X158310</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2018-05-23</th>\n      <td>51800</td>\n      <td>95300.0</td>\n      <td>343500.0</td>\n      <td>399500.0</td>\n      <td>136994</td>\n      <td>22580</td>\n      <td>144500.0</td>\n      <td>204500</td>\n      <td>237286</td>\n      <td>33650</td>\n      <td>...</td>\n      <td>2500.0</td>\n      <td>7790.0</td>\n      <td>7460.0</td>\n      <td>63720.0</td>\n      <td>13298.0</td>\n      <td>2905.0</td>\n      <td>26630.0</td>\n      <td>NaN</td>\n      <td>5079.0</td>\n      <td>10250.0</td>\n    </tr>\n    <tr>\n      <th>2018-05-24</th>\n      <td>51400</td>\n      <td>94600.0</td>\n      <td>345000.0</td>\n      <td>418000.0</td>\n      <td>136193</td>\n      <td>22681</td>\n      <td>140000.0</td>\n      <td>204500</td>\n      <td>243737</td>\n      <td>32700</td>\n      <td>...</td>\n      <td>2383.0</td>\n      <td>7880.0</td>\n      <td>7310.0</td>\n      <td>63536.0</td>\n      <td>13226.0</td>\n      <td>2890.0</td>\n      <td>25339.0</td>\n      <td>NaN</td>\n      <td>5005.0</td>\n      <td>9300.0</td>\n    </tr>\n    <tr>\n      <th>2018-05-25</th>\n      <td>52700</td>\n      <td>95200.0</td>\n      <td>352500.0</td>\n      <td>430500.0</td>\n      <td>137194</td>\n      <td>22480</td>\n      <td>139000.0</td>\n      <td>207000</td>\n      <td>253413</td>\n      <td>32250</td>\n      <td>...</td>\n      <td>2400.0</td>\n      <td>7770.0</td>\n      <td>7200.0</td>\n      <td>63997.0</td>\n      <td>13265.0</td>\n      <td>2830.0</td>\n      <td>25574.0</td>\n      <td>NaN</td>\n      <td>4870.0</td>\n      <td>8920.0</td>\n    </tr>\n    <tr>\n      <th>2018-05-28</th>\n      <td>52300</td>\n      <td>94500.0</td>\n      <td>352000.0</td>\n      <td>429000.0</td>\n      <td>136193</td>\n      <td>21677</td>\n      <td>138500.0</td>\n      <td>209000</td>\n      <td>249726</td>\n      <td>32300</td>\n      <td>...</td>\n      <td>2403.0</td>\n      <td>7980.0</td>\n      <td>7370.0</td>\n      <td>62800.0</td>\n      <td>13226.0</td>\n      <td>2790.0</td>\n      <td>25339.0</td>\n      <td>NaN</td>\n      <td>4980.0</td>\n      <td>8740.0</td>\n    </tr>\n    <tr>\n      <th>2018-05-29</th>\n      <td>51300</td>\n      <td>94800.0</td>\n      <td>343500.0</td>\n      <td>433000.0</td>\n      <td>133789</td>\n      <td>21677</td>\n      <td>140000.0</td>\n      <td>211500</td>\n      <td>249266</td>\n      <td>31650</td>\n      <td>...</td>\n      <td>2350.0</td>\n      <td>8930.0</td>\n      <td>7240.0</td>\n      <td>60866.0</td>\n      <td>13121.0</td>\n      <td>2740.0</td>\n      <td>26281.0</td>\n      <td>NaN</td>\n      <td>4631.0</td>\n      <td>8720.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2020-08-31</th>\n      <td>54000</td>\n      <td>75100.0</td>\n      <td>740000.0</td>\n      <td>778000.0</td>\n      <td>322500</td>\n      <td>81691</td>\n      <td>176500.0</td>\n      <td>452500</td>\n      <td>291656</td>\n      <td>42450</td>\n      <td>...</td>\n      <td>275.0</td>\n      <td>862.0</td>\n      <td>179.0</td>\n      <td>2075.0</td>\n      <td>5968.0</td>\n      <td>739.0</td>\n      <td>620.0</td>\n      <td>2015.0</td>\n      <td>498.0</td>\n      <td>505.0</td>\n    </tr>\n    <tr>\n      <th>2020-09-01</th>\n      <td>54200</td>\n      <td>75200.0</td>\n      <td>743000.0</td>\n      <td>781000.0</td>\n      <td>324500</td>\n      <td>80587</td>\n      <td>180000.0</td>\n      <td>454500</td>\n      <td>292638</td>\n      <td>43150</td>\n      <td>...</td>\n      <td>275.0</td>\n      <td>862.0</td>\n      <td>179.0</td>\n      <td>2075.0</td>\n      <td>5961.0</td>\n      <td>739.0</td>\n      <td>620.0</td>\n      <td>2015.0</td>\n      <td>498.0</td>\n      <td>505.0</td>\n    </tr>\n    <tr>\n      <th>2020-09-02</th>\n      <td>54400</td>\n      <td>75500.0</td>\n      <td>742000.0</td>\n      <td>770000.0</td>\n      <td>332500</td>\n      <td>82695</td>\n      <td>176000.0</td>\n      <td>452000</td>\n      <td>295093</td>\n      <td>42200</td>\n      <td>...</td>\n      <td>275.0</td>\n      <td>862.0</td>\n      <td>179.0</td>\n      <td>2075.0</td>\n      <td>5891.0</td>\n      <td>739.0</td>\n      <td>620.0</td>\n      <td>2015.0</td>\n      <td>498.0</td>\n      <td>505.0</td>\n    </tr>\n    <tr>\n      <th>2020-09-03</th>\n      <td>56400</td>\n      <td>78700.0</td>\n      <td>768000.0</td>\n      <td>779000.0</td>\n      <td>339000</td>\n      <td>82293</td>\n      <td>176500.0</td>\n      <td>452500</td>\n      <td>294111</td>\n      <td>42700</td>\n      <td>...</td>\n      <td>275.0</td>\n      <td>862.0</td>\n      <td>179.0</td>\n      <td>2075.0</td>\n      <td>6080.0</td>\n      <td>739.0</td>\n      <td>620.0</td>\n      <td>2010.0</td>\n      <td>498.0</td>\n      <td>505.0</td>\n    </tr>\n    <tr>\n      <th>2020-09-04</th>\n      <td>55600</td>\n      <td>78700.0</td>\n      <td>743000.0</td>\n      <td>773000.0</td>\n      <td>328500</td>\n      <td>80688</td>\n      <td>172500.0</td>\n      <td>439000</td>\n      <td>288710</td>\n      <td>42150</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>565 rows × 2203 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# 2. price에서 2019년만 선택해서 price_sub로 저장\nprice_sub=price.loc['2019']\nprice_sub\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>X005930</th>\n      <th>X000660</th>\n      <th>X051910</th>\n      <th>X207940</th>\n      <th>X035420</th>\n      <th>X035720</th>\n      <th>X005380</th>\n      <th>X006400</th>\n      <th>X068270</th>\n      <th>X000270</th>\n      <th>...</th>\n      <th>X058220</th>\n      <th>X038160</th>\n      <th>X033600</th>\n      <th>X195440</th>\n      <th>X058420</th>\n      <th>X121890</th>\n      <th>X114570</th>\n      <th>X347140</th>\n      <th>X080440</th>\n      <th>X158310</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-01-02</th>\n      <td>38750</td>\n      <td>60600.0</td>\n      <td>337000.0</td>\n      <td>374000.0</td>\n      <td>118000</td>\n      <td>20473</td>\n      <td>114000.0</td>\n      <td>210500</td>\n      <td>201192</td>\n      <td>32800</td>\n      <td>...</td>\n      <td>2525.0</td>\n      <td>7320.0</td>\n      <td>1810.0</td>\n      <td>38781.0</td>\n      <td>9939.0</td>\n      <td>1845.0</td>\n      <td>17675.0</td>\n      <td>NaN</td>\n      <td>3250.0</td>\n      <td>2700.0</td>\n    </tr>\n    <tr>\n      <th>2019-01-03</th>\n      <td>37600</td>\n      <td>57700.0</td>\n      <td>328000.0</td>\n      <td>376500.0</td>\n      <td>122000</td>\n      <td>20573</td>\n      <td>116500.0</td>\n      <td>203000</td>\n      <td>197440</td>\n      <td>32850</td>\n      <td>...</td>\n      <td>2550.0</td>\n      <td>7260.0</td>\n      <td>1730.0</td>\n      <td>35054.0</td>\n      <td>9939.0</td>\n      <td>1870.0</td>\n      <td>17581.0</td>\n      <td>NaN</td>\n      <td>3155.0</td>\n      <td>2675.0</td>\n    </tr>\n    <tr>\n      <th>2019-01-04</th>\n      <td>37450</td>\n      <td>58300.0</td>\n      <td>330500.0</td>\n      <td>381000.0</td>\n      <td>125500</td>\n      <td>20774</td>\n      <td>119500.0</td>\n      <td>201000</td>\n      <td>206350</td>\n      <td>34850</td>\n      <td>...</td>\n      <td>2475.0</td>\n      <td>7450.0</td>\n      <td>1780.0</td>\n      <td>35330.0</td>\n      <td>9972.0</td>\n      <td>1885.0</td>\n      <td>18806.0</td>\n      <td>NaN</td>\n      <td>3095.0</td>\n      <td>2670.0</td>\n    </tr>\n    <tr>\n      <th>2019-01-07</th>\n      <td>38750</td>\n      <td>58700.0</td>\n      <td>343000.0</td>\n      <td>388000.0</td>\n      <td>131500</td>\n      <td>20673</td>\n      <td>120500.0</td>\n      <td>217000</td>\n      <td>202599</td>\n      <td>34200</td>\n      <td>...</td>\n      <td>2483.0</td>\n      <td>7750.0</td>\n      <td>1785.0</td>\n      <td>35330.0</td>\n      <td>10391.0</td>\n      <td>1885.0</td>\n      <td>18806.0</td>\n      <td>NaN</td>\n      <td>3095.0</td>\n      <td>2715.0</td>\n    </tr>\n    <tr>\n      <th>2019-01-08</th>\n      <td>38100</td>\n      <td>59200.0</td>\n      <td>349500.0</td>\n      <td>386000.0</td>\n      <td>130000</td>\n      <td>20051</td>\n      <td>119500.0</td>\n      <td>218500</td>\n      <td>200254</td>\n      <td>33800</td>\n      <td>...</td>\n      <td>2445.0</td>\n      <td>7790.0</td>\n      <td>1740.0</td>\n      <td>34502.0</td>\n      <td>10391.0</td>\n      <td>1975.0</td>\n      <td>18099.0</td>\n      <td>NaN</td>\n      <td>3050.0</td>\n      <td>2895.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2019-12-23</th>\n      <td>55500</td>\n      <td>94600.0</td>\n      <td>313000.0</td>\n      <td>422500.0</td>\n      <td>184000</td>\n      <td>29806</td>\n      <td>122500.0</td>\n      <td>228000</td>\n      <td>174929</td>\n      <td>44750</td>\n      <td>...</td>\n      <td>1265.0</td>\n      <td>3765.0</td>\n      <td>446.0</td>\n      <td>6130.0</td>\n      <td>11982.0</td>\n      <td>2520.0</td>\n      <td>3270.0</td>\n      <td>NaN</td>\n      <td>1420.0</td>\n      <td>2705.0</td>\n    </tr>\n    <tr>\n      <th>2019-12-24</th>\n      <td>55000</td>\n      <td>93800.0</td>\n      <td>312500.0</td>\n      <td>417000.0</td>\n      <td>182000</td>\n      <td>29405</td>\n      <td>122000.0</td>\n      <td>225000</td>\n      <td>173521</td>\n      <td>44700</td>\n      <td>...</td>\n      <td>1265.0</td>\n      <td>3740.0</td>\n      <td>407.0</td>\n      <td>5750.0</td>\n      <td>11255.0</td>\n      <td>2385.0</td>\n      <td>3020.0</td>\n      <td>NaN</td>\n      <td>1210.0</td>\n      <td>2360.0</td>\n    </tr>\n    <tr>\n      <th>2019-12-26</th>\n      <td>55400</td>\n      <td>94800.0</td>\n      <td>308000.0</td>\n      <td>413500.0</td>\n      <td>180500</td>\n      <td>29706</td>\n      <td>122500.0</td>\n      <td>222500</td>\n      <td>177743</td>\n      <td>45100</td>\n      <td>...</td>\n      <td>1375.0</td>\n      <td>3815.0</td>\n      <td>425.0</td>\n      <td>5520.0</td>\n      <td>10908.0</td>\n      <td>2245.0</td>\n      <td>3240.0</td>\n      <td>NaN</td>\n      <td>1215.0</td>\n      <td>2100.0</td>\n    </tr>\n    <tr>\n      <th>2019-12-27</th>\n      <td>56500</td>\n      <td>96000.0</td>\n      <td>310500.0</td>\n      <td>429500.0</td>\n      <td>183500</td>\n      <td>30810</td>\n      <td>120500.0</td>\n      <td>233000</td>\n      <td>180689</td>\n      <td>44350</td>\n      <td>...</td>\n      <td>1450.0</td>\n      <td>3835.0</td>\n      <td>418.0</td>\n      <td>5270.0</td>\n      <td>10875.0</td>\n      <td>2340.0</td>\n      <td>3350.0</td>\n      <td>NaN</td>\n      <td>1215.0</td>\n      <td>1890.0</td>\n    </tr>\n    <tr>\n      <th>2019-12-30</th>\n      <td>55800</td>\n      <td>94100.0</td>\n      <td>317500.0</td>\n      <td>433000.0</td>\n      <td>186500</td>\n      <td>30810</td>\n      <td>120500.0</td>\n      <td>236000</td>\n      <td>177743</td>\n      <td>44300</td>\n      <td>...</td>\n      <td>1585.0</td>\n      <td>3805.0</td>\n      <td>413.0</td>\n      <td>5210.0</td>\n      <td>10594.0</td>\n      <td>2350.0</td>\n      <td>3210.0</td>\n      <td>NaN</td>\n      <td>1155.0</td>\n      <td>2455.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>246 rows × 2203 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# 3. 열 별로 직전 대비 변동률을 구하고, 누적 곱하여 cum_ret 생성\nreturns = price_sub.pct_change()\ncum_ret = (1 + returns).prod(axis=0) - 1 # 마지막에 1 빼주는게 맞음\ncum_ret\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/n2/jbh_0_091bx8qgz7j87t2qwc0000gp/T/ipykernel_81848/4181596083.py:2: FutureWarning:\n\nThe default fill_method='pad' in DataFrame.pct_change is deprecated and will be removed in a future version. Either fill in any non-leading NA values prior to calling pct_change or specify 'fill_method=None' to not fill NA values.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nX005930    0.440000\nX000660    0.552805\nX051910   -0.057864\nX207940    0.157754\nX035420    0.580508\n             ...   \nX121890    0.273713\nX114570   -0.818388\nX347140    0.000000\nX080440   -0.644615\nX158310   -0.090741\nLength: 2203, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# 4. cum_ret에서 높은 순서로 10개 출력 및 가장 높은 종목의 시계열 그림 출력\ntop10_cum_ret = cum_ret.nlargest(10)\ntop10_cum_ret\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nX088290    13.576271\nX101360     7.400000\nX078130     4.155172\nX139670     4.049401\nX032500     3.443478\nX009190     2.992042\nX138080     2.719443\nX336370     2.693285\nX033250     2.536524\nX214150     2.498146\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ntop_index = top10_cum_ret.index[0]\nprice_sub[top_index].plot()\nplot.xlabel('Date')\nplot.ylabel('Price')\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nText(0, 0.5, 'Price')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Python final_files/figure-pdf/cell-8-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# 5. 열 별로 직전 대비 변동률의 표준편차를 계산하여 std 생성\nstd = returns.std(axis=0) * np.sqrt(252)\nstd\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nX005930    0.230925\nX000660    0.353011\nX051910    0.248067\nX207940    0.367346\nX035420    0.328026\n             ...   \nX121890    0.941212\nX114570    0.709787\nX347140         NaN\nX080440    0.995452\nX158310    1.000060\nLength: 2203, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# 6. std에서 0이거나 NaN인 경우 제외\nstd = std[(std != 0) & (~std.isna())]\nstd\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nX005930    0.230925\nX000660    0.353011\nX051910    0.248067\nX207940    0.367346\nX035420    0.328026\n             ...   \nX058420    0.680404\nX121890    0.941212\nX114570    0.709787\nX080440    0.995452\nX158310    1.000060\nLength: 2097, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# 7. 종목 별 Sharpe ratio=cum_ret/std를 구하여 shrp 생성\nshrp = cum_ret / std\nshrp\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nX000020   -0.412952\nX000040   -1.106285\nX000050   -0.795542\nX000060   -0.651532\nX000070   -0.593173\n             ...   \nX361390         NaN\nX361610         NaN\nX363280         NaN\nX375500         NaN\nX378850         NaN\nLength: 2203, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# 8. shrp에 NaN이 포함된 경우 shar의 최소값으로 대체\nshrp.fillna(shrp.min(), inplace=True)\nshrp\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nX000020   -0.412952\nX000040   -1.106285\nX000050   -0.795542\nX000060   -0.651532\nX000070   -0.593173\n             ...   \nX361390   -2.164228\nX361610   -2.164228\nX363280   -2.164228\nX375500   -2.164228\nX378850   -2.164228\nLength: 2203, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# 9. shrp를 값이 큰 순서로 10개 종목 출력\ntop10_shrp = shrp.nlargest(10)\ntop10_shrp\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nX088290    12.317314\nX032500     5.582321\nX101360     5.364799\nX139670     4.570944\nX138080     4.033614\nX078130     3.760220\nX214150     3.711147\nX036540     3.707145\nX097520     3.624222\nX000990     3.552103\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# 10. 위 10개 종목에 대한 cum_ret, std, shrp 값을 각 열로 하는 pd.DataFrame  final_result 생성\nfinal_result = pd.DataFrame({\n    'cum_ret': cum_ret[top10_shrp.index],\n    'std': std[top10_shrp.index],\n    'shrp': shrp[top10_shrp.index]\n})\nfinal_result\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cum_ret</th>\n      <th>std</th>\n      <th>shrp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X088290</th>\n      <td>13.576271</td>\n      <td>1.102210</td>\n      <td>12.317314</td>\n    </tr>\n    <tr>\n      <th>X032500</th>\n      <td>3.443478</td>\n      <td>0.616854</td>\n      <td>5.582321</td>\n    </tr>\n    <tr>\n      <th>X101360</th>\n      <td>7.400000</td>\n      <td>1.379362</td>\n      <td>5.364799</td>\n    </tr>\n    <tr>\n      <th>X139670</th>\n      <td>4.049401</td>\n      <td>0.885900</td>\n      <td>4.570944</td>\n    </tr>\n    <tr>\n      <th>X138080</th>\n      <td>2.719443</td>\n      <td>0.674195</td>\n      <td>4.033614</td>\n    </tr>\n    <tr>\n      <th>X078130</th>\n      <td>4.155172</td>\n      <td>1.105034</td>\n      <td>3.760220</td>\n    </tr>\n    <tr>\n      <th>X214150</th>\n      <td>2.498146</td>\n      <td>0.673147</td>\n      <td>3.711147</td>\n    </tr>\n    <tr>\n      <th>X036540</th>\n      <td>2.142336</td>\n      <td>0.577894</td>\n      <td>3.707145</td>\n    </tr>\n    <tr>\n      <th>X097520</th>\n      <td>1.903846</td>\n      <td>0.525312</td>\n      <td>3.624222</td>\n    </tr>\n    <tr>\n      <th>X000990</th>\n      <td>1.628571</td>\n      <td>0.458481</td>\n      <td>3.552103</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Problem 3.\n\n![](images/Python_final3.png)\n\n\n\n## Answer\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndef ECallSimul_2(S0, K, T, r, sigma, M, I=250000):\n    import numpy as np\n    S = np.zeros((I,M+1))\n    S[:,0] = S0\n    dt = T/M\n    z = np.random.standard_normal(size=(I,M))\n    for t in range(1,M+1):\n        S[:,t] = S[:,t-1]*np.exp((r-0.5*sigma**2)*dt + sigma*np.sqrt(dt)*z[:,t-1])\n    sum_val = np.maximum(S[:,-1]-K, 0)\n    C0 = np.exp(-r*T)*np.mean(sum_val)\n    return ( round(C0, 3) )\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n%time ECallSimul_1(S0=100.,K=105.,T=1.,r=0.05,sigma=0.2,M=50,I=250000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 6.6 s, sys: 43 ms, total: 6.64 s\nWall time: 6.21 s\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n8.054\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n%time ECallSimul_2(S0=100.,K=105.,T=1.,r=0.05,sigma=0.2,M=50,I=250000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 420 ms, sys: 22.1 ms, total: 442 ms\nWall time: 441 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n7.992\n```\n:::\n:::\n\n\n",
    "supporting": [
      "Python final_files/figure-pdf"
    ],
    "filters": []
  }
}